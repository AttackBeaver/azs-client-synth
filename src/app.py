import streamlit as st
import pandas as pd
import json
import os
import plotly.express as px
from generator import generate_clients
from mapper import map_clients_to_portraits
from visualization import plot_portrait_distribution, plot_heatmap_features, plot_metric
from simulator_advanced import simulate_feature_response

st.set_page_config(
    page_title="–ê–ó–° TwinLab",
    layout="wide",
    initial_sidebar_state="expanded",
    page_icon="‚õΩ"
)

# === –∑–∞–≥–æ–ª–æ–≤–æ–∫ ===
st.title("‚õΩ–ê–ó–° TwinLab‚õΩ")
st.subheader("–ö–æ–º–∞–Ω–¥–∞-—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫: ¬´404: –ò–º—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ¬ª")
with st.expander("–ü—Ä–æ–µ–∫—Ç –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω –≤ —Ä–∞–º–∫–∞—Ö —Ö–∞–∫–∞—Ç–æ–Ω–∞ ¬´–ú–æ—è –ø—Ä–æ—Ñ–µ—Å—Å–∏—è ‚Äì IT 2025¬ª", expanded=False):
    st.markdown("""
–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç, –∫–∞–∫ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö –æ –∫–ª–∏–µ–Ω—Ç–∞—Ö –ê–ó–° –º–æ–∂–Ω–æ:
- —Å–µ–≥–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π,
- –ø–æ—Å—Ç—Ä–æ–∏—Ç—å –∫–ª–∏–µ–Ω—Ç—Å–∫–∏–µ –ø–æ—Ä—Ç—Ä–µ—Ç—ã,
- –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø–æ–≤–µ–¥–µ–Ω–∏–µ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º,
- –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –ø—Ä–æ–¥—É–∫—Ç–æ–≤—ã–µ —Ä–µ—à–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, –≤—ã–±–æ—Ä —Ü–µ–ª–µ–≤–æ–π –∞—É–¥–∏—Ç–æ—Ä–∏–∏, –ø—Ä–æ–≥–Ω–æ–∑ –æ—Ç–∫–ª–∏–∫–∞ –∏ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏–µ A/B-—Ç–µ—Å—Ç–æ–≤).
""")
    
# === –±–∞—Ä —Å–ª–µ–≤–∞ ===
st.sidebar.image("docs/f404.png", width="content")

st.sidebar.header("‚öôÔ∏è–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏")
num_clients = st.sidebar.slider("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª–∏–µ–Ω—Ç–æ–≤", min_value=20, max_value=2000, value=1000, step=10)
with st.sidebar:
    st.markdown(""" --- """)

clients_df = st.session_state.get("clients_df", None)
portraits_rules = json.load(open("src/behavior_rules.json", "r", encoding="utf-8"))
feature_hypotheses = json.load(open("src/feature_hypotheses.json", "r", encoding="utf-8"))

st.sidebar.header("‚öôÔ∏è–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏–º—É–ª—è—Ü–∏–∏")
selected_feature = st.sidebar.selectbox(
    "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏—á—É –¥–ª—è —Å–∏–º—É–ª—è—Ü–∏–∏",
    [f["feature_name"] for f in feature_hypotheses]
)
    
DATA_PATH = "data/synthetic.csv"
MAPPED_PATH = "data/synthetic_mapped.csv"

# === –≤—ã–±–∏—Ä–∞–µ–º –æ—Ç–∫—É–¥–∞ –±—Ä–∞—Ç—å –¥–∞–Ω–Ω—ã–µ ===
st.subheader("–ò—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö")

uploaded = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ CSV —Å –æ–±–µ–∑–ª–∏—á–µ–Ω–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ (–∏–ª–∏ –ø–µ—Ä–µ—Ç–∞—â–∏—Ç–µ —Ñ–∞–π–ª)", type=["csv"])

col1, col2 = st.columns([1, 1])
with col1:
    if st.button("–ó–∞–≥—Ä—É–∑–∏—Ç—å data/synthetic.csv (–µ—Å–ª–∏ –µ—Å—Ç—å)"):
        if os.path.exists(DATA_PATH):
            try:
                df = pd.read_csv(DATA_PATH)
                st.session_state["clients_df"] = df
                st.success(f"–ó–∞–≥—Ä—É–∂–µ–Ω {DATA_PATH} ({len(df)} —Å—Ç—Ä–æ–∫)")
            except Exception as e:
                st.error(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è {DATA_PATH}: {e}")
        else:
            st.warning(f"{DATA_PATH} –Ω–µ –Ω–∞–π–¥–µ–Ω")

with col2:
    if st.button("–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ"):
        df = generate_clients(num_clients)
        # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤ data/
        os.makedirs("data", exist_ok=True)
        df.to_csv(DATA_PATH, index=False)
        st.session_state["clients_df"] = df
        st.success(f"–î–∞–Ω–Ω—ã–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {DATA_PATH} ({len(df)} —Å—Ç—Ä–æ–∫)")

# –µ—Å–ª–∏ –∑–∞–≥—Ä—É–∑–∏–ª —Ñ–∞–π–ª —á–µ—Ä–µ–∑ drag&drop
if uploaded is not None:
    try:
        df_uploaded = pd.read_csv(uploaded)
        st.session_state["clients_df"] = df_uploaded
        st.success(f"–ó–∞–≥—Ä—É–∂–µ–Ω —Ñ–∞–π–ª: {uploaded.name} ({len(df_uploaded)} —Å—Ç—Ä–æ–∫)")
    except Exception as e:
        st.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π —Ñ–∞–π–ª: {e}")

st.subheader("–ü—Ä–µ–≤—å—é –¥–∞–Ω–Ω—ã—Ö")
if "clients_df" in st.session_state:
    df = st.session_state["clients_df"]
    st.dataframe(df.head(10))
else:
    st.info("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö. –ó–∞–≥—Ä—É–∑–∏—Ç–µ CSV –∏–ª–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π—Ç–µ –Ω–æ–≤—ã–π –Ω–∞–±–æ—Ä.")

# === –æ–ø–∏—Å–∞–Ω–∏–µ –ø–æ—Ä—Ç—Ä–µ—Ç–æ–≤ –∫–ª–∏–µ–Ω—Ç–æ–≤ ===
st.subheader("–°–≤–æ–¥–∫–∞ –ø–æ –ø–æ—Ä—Ç—Ä–µ—Ç–∞–º")
with st.expander("–ù–∞—à–∏ –∫–ª–∏–µ–Ω—Ç—ã", expanded=False):
    with open("src/portraits.json", "r", encoding="utf-8") as f:
        portraits_info = json.load(f)

    for portrait in portraits_info:
        with st.expander(f"üìå {portrait['portrait_name']}", expanded=False):
            st.write(f"**–û–ø–∏—Å–∞–Ω–∏–µ:** {portrait['description']}")
            st.write(f"**–ë–∏–∑–Ω–µ—Å-—Ü–µ–Ω–Ω–æ—Å—Ç—å:** {portrait['business_value']}")
            st.write("**–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—é:**")
            for rec in portrait['recommendations']:
                st.write(f"‚Ä¢ {rec}")

# === –º–∞–ø–ø–∏–Ω–≥ ===
st.subheader("–ú–∞–ø–ø–∏–Ω–≥ –∫–ª–∏–µ–Ω—Ç–æ–≤ –Ω–∞ –ø–æ—Ä—Ç—Ä–µ—Ç—ã")
if "clients_df" in st.session_state:
    if st.button("–°–æ–ø–æ—Å—Ç–∞–≤–∏—Ç—å —Å –ø–æ—Ä—Ç—Ä–µ—Ç–∞–º–∏"):
        with st.spinner("–ê–Ω–∞–ª–∏–∑ –∏ –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤..."):
            try:
                with open("src/portraits.json", "r", encoding="utf-8") as f:
                    portraits = json.load(f)
            except Exception as e:
                st.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ portraits.json: {e}")
                st.stop()

            try:
                mapped_df = map_clients_to_portraits(st.session_state["clients_df"], portraits)
            except Exception as e:
                st.error(f"–û—à–∏–±–∫–∞ –º–∞–ø–ø–∏–Ω–≥–∞: {e}") # –±—ã–ª–∞ –æ—à–∏–±–∫–∞, —Å–ª–µ–¥–∏—Ç—å
                st.stop()

            st.session_state["mapped_df"] = mapped_df
            # —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            os.makedirs("data", exist_ok=True)
            mapped_df.to_csv(MAPPED_PATH, index=False)

        st.success("‚úÖ –ú–∞–ø–ø–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω!")
        st.dataframe(mapped_df.head(10))

        st.markdown("### –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –ø–æ—Ä—Ç—Ä–µ—Ç–∞–º")
        counts = mapped_df["portrait_name"].value_counts()
        st.bar_chart(counts)
        st.markdown(f"–†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–∞–∫–∂–µ —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ `{MAPPED_PATH}`")
else:
    st.info("–°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ –∏–ª–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π—Ç–µ –¥–∞–Ω–Ω—ã–µ.")

# === –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ—Ä—Ç—Ä–µ—Ç–æ–≤ ===
feature_names = {
    "visits_per_month": "–í–∏–∑–∏—Ç—ã –≤ –º–µ—Å—è—Ü",
    "avg_liters_per_visit": "–°—Ä–µ–¥–Ω–∏–π –ª–∏—Ç—Ä–∞–∂",
    "avg_spend_per_visit": "–°—Ä–µ–¥–Ω–∏–π —á–µ–∫"
}

if "mapped_df" in st.session_state:
    df_mapped = st.session_state["mapped_df"]

    st.subheader("–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ—Ä—Ç—Ä–µ—Ç–æ–≤")
    st.plotly_chart(plot_portrait_distribution(df_mapped))

    st.plotly_chart(plot_heatmap_features(df_mapped, list(feature_names.keys()), feature_names))

    st.subheader("–ú–µ—Ç—Ä–∏–∫–∏ –ø–æ –ø–æ—Ä—Ç—Ä–µ—Ç–∞–º")
    for metric, name in feature_names.items():
        st.plotly_chart(plot_metric(df_mapped, metric, name))


# === —Å–∏–º—É–ª—è—Ü–º—è —Ä–µ–∞–∫—Ü–∏–∏ –ø–æ—Ä—Ç—Ä–µ—Ç–æ–≤ ===
st.subheader("–°–∏–º—É–ª—è—Ü–∏—è —Ä–µ–∞–∫—Ü–∏–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤")
if clients_df is not None and st.button("–ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–∏–º—É–ª—è—Ü–∏—é"):
    with st.spinner("–°–∏–º—É–ª—è—Ü–∏—è –æ—Ç–∫–ª–∏–∫–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤..."):
        sim_df, metrics_df = simulate_feature_response(clients_df, portraits_rules, feature_hypotheses, selected_feature)
        st.session_state["sim_df"] = sim_df

    st.success("‚úÖ –°–∏–º—É–ª—è—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")

    st.subheader("–ú–µ—Ç—Ä–∏–∫–∏ –æ—Ç–∫–ª–∏–∫–∞ –ø–æ –ø–æ—Ä—Ç—Ä–µ—Ç–∞–º")
    st.dataframe(metrics_df)

    st.subheader("–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ—Ç–∫–ª–∏–∫–æ–≤ –ø–æ –ø–æ—Ä—Ç—Ä–µ—Ç–∞–º")
    st.bar_chart(metrics_df.set_index("portrait_name")["response_rate"])

    st.subheader("–ü–µ—Ä–≤—ã–µ 200 –∫–ª–∏–µ–Ω—Ç–æ–≤ —Å —Ä–µ–∞–∫—Ü–∏–µ–π")
    st.dataframe(sim_df.head(200))

# === –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ ===
st.markdown("---")
st.subheader("–í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")
with st.expander("–ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–≤–µ–¥–µ–Ω–∏—è"):
    st.write("üîÆ –ë—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –±–ª–æ–∫ –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞ –≤–∏–∑–∏—Ç–æ–≤ –∏ –æ–±—ä—ë–º–æ–≤ –ø–æ–∫—É–ø–æ–∫.")

# === –ø–æ–¥–≤–∞–ª ===
st.markdown("""
---
¬© 2025. –ü—Ä–æ–µ–∫—Ç –∫–æ–º–∞–Ω–¥—ã **¬´404: –ò–º—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ¬ª**  
–•–∞–∫–∞—Ç–æ–Ω *¬´–ú–æ—è –ø—Ä–æ—Ñ–µ—Å—Å–∏—è ‚Äî IT 2025¬ª*
""")
